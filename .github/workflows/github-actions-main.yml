# <-- FIX: Correct YAML key for the workflow name
name: Github-test-pipeline

on:
  push:
    branches:
      - main
      - dev

permissions:
  id-token: write
  contents: read

jobs:
  set-environment:
    runs-on: ubuntu-latest
    outputs:
      current_env: ${{ steps.set_env.outputs.current_env }}
    steps:
      - name: Check if prod
        if: endsWith(github.ref, '/main')
        run: echo "ENVIRONMENT_NAME=prod" >> $GITHUB_ENV
        
      - name: Check if dev
        if: endsWith(github.ref, '/dev')
        run: echo "ENVIRONMENT_NAME=dev" >> $GITHUB_ENV

      - name: Set the output
        id: set_env
        # <-- FIX: Use the modern, recommended way to set job outputs
        run: echo "current_env=${{ env.ENVIRONMENT_NAME }}" >> $GITHUB_OUTPUT
  
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: set-environment
    environment: ${{ needs.set-environment.outputs.current_env }}
    steps:
      - name: Generate dynamic session name
        id: generate_session_name
        run: |
          SESSION_NAME="${{ github.workflow }}-$(date +'%H-%M-%d-%m-%y')"
          echo "name=$SESSION_NAME" >> $GITHUB_OUTPUT

      - name: Deploying to Environment
        run: echo "Deploying to ${{ needs.set-environment.outputs.current_env }} environment."

      - name: Configure AWS credential
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          # <-- FIX: Use the 'vars' context to get environment variables
          audience: ${{ vars.AWS_AUDIENCE }}
          aws-region: ${{ vars.AWS_REGION }}
          
          # The 'secrets' context is correct for environment secrets
          role-to-assume: arn:aws:iam::713881826090:role/due1-openid-workflow-role
          role-session-name: ${{ steps.generate_session_name.outputs.name }}

      - name: Get caller identity
        run: aws sts get-caller-identity

      # ... your docker steps continue here ...
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          file: ./Dockerfile
          push: false
          tags: user/app:latest
    
  debug-oidc-token:
    runs-on: ubuntu-latest
    # This job needs no other permissions
    permissions:
      id-token: write

    steps:
      - name: Get OIDC Token
        id: get_token
        # We use the AWS action just to easily get the token output
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          # Use a dummy role and region, we only care about the token
          role-to-assume: arn:aws:iam::123456789012:role/dummy-role-for-debug
          aws-region: us-east-1
          # !! IMPORTANT !! Set this to the exact same audience as your real job
          audience: sts.amazonaws.com

      - name: Decode and Print OIDC Token Payload
        # This step runs even if the step above fails, so we can see the token
        if: always()
        run: |
          echo "--- OIDC Token Payload ---"
          token_payload=$(echo "${{ steps.get_token.outputs.aws-oidc-token }}" | cut -d '.' -f 2 | base64 --decode)
          echo "$token_payload" | jq .
          echo "--------------------------"
